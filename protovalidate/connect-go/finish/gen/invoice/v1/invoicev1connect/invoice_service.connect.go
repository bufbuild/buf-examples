// Copyright 2020-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: invoice/v1/invoice_service.proto

package invoicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-examples/protovalidate/connect-go/finish/gen/invoice/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InvoiceServiceName is the fully-qualified name of the InvoiceService service.
	InvoiceServiceName = "invoice.v1.InvoiceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InvoiceServiceCreateInvoiceProcedure is the fully-qualified name of the InvoiceService's
	// CreateInvoice RPC.
	InvoiceServiceCreateInvoiceProcedure = "/invoice.v1.InvoiceService/CreateInvoice"
)

// InvoiceServiceClient is a client for the invoice.v1.InvoiceService service.
type InvoiceServiceClient interface {
	// CreateInvoice creates a new invoice.
	CreateInvoice(context.Context, *connect.Request[v1.CreateInvoiceRequest]) (*connect.Response[v1.CreateInvoiceResponse], error)
}

// NewInvoiceServiceClient constructs a client for the invoice.v1.InvoiceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInvoiceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InvoiceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	invoiceServiceMethods := v1.File_invoice_v1_invoice_service_proto.Services().ByName("InvoiceService").Methods()
	return &invoiceServiceClient{
		createInvoice: connect.NewClient[v1.CreateInvoiceRequest, v1.CreateInvoiceResponse](
			httpClient,
			baseURL+InvoiceServiceCreateInvoiceProcedure,
			connect.WithSchema(invoiceServiceMethods.ByName("CreateInvoice")),
			connect.WithClientOptions(opts...),
		),
	}
}

// invoiceServiceClient implements InvoiceServiceClient.
type invoiceServiceClient struct {
	createInvoice *connect.Client[v1.CreateInvoiceRequest, v1.CreateInvoiceResponse]
}

// CreateInvoice calls invoice.v1.InvoiceService.CreateInvoice.
func (c *invoiceServiceClient) CreateInvoice(ctx context.Context, req *connect.Request[v1.CreateInvoiceRequest]) (*connect.Response[v1.CreateInvoiceResponse], error) {
	return c.createInvoice.CallUnary(ctx, req)
}

// InvoiceServiceHandler is an implementation of the invoice.v1.InvoiceService service.
type InvoiceServiceHandler interface {
	// CreateInvoice creates a new invoice.
	CreateInvoice(context.Context, *connect.Request[v1.CreateInvoiceRequest]) (*connect.Response[v1.CreateInvoiceResponse], error)
}

// NewInvoiceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInvoiceServiceHandler(svc InvoiceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	invoiceServiceMethods := v1.File_invoice_v1_invoice_service_proto.Services().ByName("InvoiceService").Methods()
	invoiceServiceCreateInvoiceHandler := connect.NewUnaryHandler(
		InvoiceServiceCreateInvoiceProcedure,
		svc.CreateInvoice,
		connect.WithSchema(invoiceServiceMethods.ByName("CreateInvoice")),
		connect.WithHandlerOptions(opts...),
	)
	return "/invoice.v1.InvoiceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InvoiceServiceCreateInvoiceProcedure:
			invoiceServiceCreateInvoiceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInvoiceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInvoiceServiceHandler struct{}

func (UnimplementedInvoiceServiceHandler) CreateInvoice(context.Context, *connect.Request[v1.CreateInvoiceRequest]) (*connect.Response[v1.CreateInvoiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("invoice.v1.InvoiceService.CreateInvoice is not implemented"))
}

// Copyright 2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: bufbuild/weather/v1/weather_service.proto

package weatherv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetWeatherRequest is a request for weather at a point on Earth.
type GetWeatherRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// latitude must be between -90 and 90, inclusive, to be valid. Use of a
	// float allows precision to about one square meter.
	Latitude float32 `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// longitude must be between -180 and 180, inclusive, to be valid. Use of a
	// float allows precision to about one square meter.
	Longitude float32 `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// forecast_date for the weather request. It must be within the next
	// three days.
	ForecastDate  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=forecast_date,json=forecastDate,proto3" json:"forecast_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWeatherRequest) Reset() {
	*x = GetWeatherRequest{}
	mi := &file_bufbuild_weather_v1_weather_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWeatherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeatherRequest) ProtoMessage() {}

func (x *GetWeatherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bufbuild_weather_v1_weather_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeatherRequest.ProtoReflect.Descriptor instead.
func (*GetWeatherRequest) Descriptor() ([]byte, []int) {
	return file_bufbuild_weather_v1_weather_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetWeatherRequest) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetWeatherRequest) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GetWeatherRequest) GetForecastDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ForecastDate
	}
	return nil
}

var File_bufbuild_weather_v1_weather_service_proto protoreflect.FileDescriptor

var file_bufbuild_weather_v1_weather_service_proto_rawDesc = string([]byte{
	0x0a, 0x29, 0x62, 0x75, 0x66, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x77, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x62, 0x75, 0x66,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4,
	0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xba, 0x48, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00,
	0xb4, 0x42, 0x2d, 0x00, 0x00, 0xb4, 0xc2, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x2d, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xba, 0x48, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00, 0x34, 0x43,
	0x2d, 0x00, 0x00, 0x34, 0xc3, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0xc2, 0x01, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x80, 0x01, 0xba, 0x48, 0x7d, 0xba, 0x01, 0x7a, 0x0a, 0x1d, 0x66,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x77, 0x69, 0x74,
	0x68, 0x69, 0x6e, 0x5f, 0x37, 0x32, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x2b, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20,
	0x37, 0x32, 0x20, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x1a, 0x2c, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x3e, 0x3d, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3c,
	0x3d, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x2b, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x28, 0x27, 0x37, 0x32, 0x68, 0x27, 0x29, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x42, 0xff, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x75,
	0x66, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x42, 0x13, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x61, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x66, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d,
	0x67, 0x6f, 0x2f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x62, 0x75,
	0x66, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x3b, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x57,
	0x58, 0xaa, 0x02, 0x13, 0x42, 0x75, 0x66, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x57, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x42, 0x75, 0x66, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5c, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1f,
	0x42, 0x75, 0x66, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5c, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x15, 0x42, 0x75, 0x66, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x3a, 0x3a, 0x57, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_bufbuild_weather_v1_weather_service_proto_rawDescOnce sync.Once
	file_bufbuild_weather_v1_weather_service_proto_rawDescData []byte
)

func file_bufbuild_weather_v1_weather_service_proto_rawDescGZIP() []byte {
	file_bufbuild_weather_v1_weather_service_proto_rawDescOnce.Do(func() {
		file_bufbuild_weather_v1_weather_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bufbuild_weather_v1_weather_service_proto_rawDesc), len(file_bufbuild_weather_v1_weather_service_proto_rawDesc)))
	})
	return file_bufbuild_weather_v1_weather_service_proto_rawDescData
}

var file_bufbuild_weather_v1_weather_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_bufbuild_weather_v1_weather_service_proto_goTypes = []any{
	(*GetWeatherRequest)(nil),     // 0: bufbuild.weather.v1.GetWeatherRequest
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_bufbuild_weather_v1_weather_service_proto_depIdxs = []int32{
	1, // 0: bufbuild.weather.v1.GetWeatherRequest.forecast_date:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_bufbuild_weather_v1_weather_service_proto_init() }
func file_bufbuild_weather_v1_weather_service_proto_init() {
	if File_bufbuild_weather_v1_weather_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bufbuild_weather_v1_weather_service_proto_rawDesc), len(file_bufbuild_weather_v1_weather_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bufbuild_weather_v1_weather_service_proto_goTypes,
		DependencyIndexes: file_bufbuild_weather_v1_weather_service_proto_depIdxs,
		MessageInfos:      file_bufbuild_weather_v1_weather_service_proto_msgTypes,
	}.Build()
	File_bufbuild_weather_v1_weather_service_proto = out.File
	file_bufbuild_weather_v1_weather_service_proto_goTypes = nil
	file_bufbuild_weather_v1_weather_service_proto_depIdxs = nil
}

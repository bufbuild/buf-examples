services:
  # We use PostgreSQL (https://www.postgresql.org/) for storing metadata for bufstream.
  postgres:
    # Our minimum supported version for PostgreSQL is 14.
    image: postgres:14
    container_name: postgres
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=examplepassword
      - POSTGRES_DB=examplebufstreamdb
    networks:
      bufstream:
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "examplebufstreamdb"]
  minio:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      bufstream:
        aliases:
          - bufstream.minio
    ports:
      - 9000:9000
      - 9001:9001
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "--output", "/dev/null", "http://localhost:9000/minio/health/live"]
    command:
      - server
      - /data
      - --console-address
      - :9001

  # We use Minio Client (https://min.io/docs/minio/linux/reference/minio-mc.html)
  # to bootstrap a MinIO Bucket as MinIO doesn't come prepopulated with one, and
  # Bufstream doesn't create one itself.
  mc:
    image: minio/mc:RELEASE.2025-05-21T01-59-54Z
    container_name: mc
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    networks:
      bufstream:
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/bufstream;
      /usr/bin/mc anonymous set public minio/bufstream;
      tail -f /dev/null
      "

  bufstream:
    image: bufbuild/bufstream:0.3.27
    hostname: bufstream
    container_name: bufstream
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - BUFSTREAM_KAFKA_HOST=bufstream
      - BUFSTREAM_KAFKA_PUBLIC_HOST=bufstream
    networks:
      bufstream:
    ports:
      - 9089:9089
      - 9092:9092
    # Edit bufstream.yaml within this repository to change configuration.
    volumes:
      - ./bufstream.yaml:/bufstream.yaml
    healthcheck:
      test: ["CMD", "/usr/local/bin/bufstream", "admin", "status", "--exit-code", "--url", "http://127.0.0.1:9089"]
    command:
      - serve
      - --config
      - /bufstream.yaml

# We add a network to the docker compose so there's less risk
# of conflict with information in the local network.
networks:
  bufstream:

services:
  # Object storage: MinIO and its controller (mc)
  minio:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--silent",
          "--fail",
          "--output",
          "/dev/null",
          "http://localhost:9000/minio/health/live",
        ]
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    command: ["server", "/data", "--console-address", ":9001"]
  mc:
    depends_on:
      minio:
        condition: service_healthy
    image: minio/mc:RELEASE.2025-05-21T01-59-54Z
    container_name: mc
    networks:
      iceberg_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set  minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc anonymous set public minio/warehouse;
      tail -f /dev/null
      "

  # The Bufstream broker, relying on MinIO for object storage and the REST
  # Iceberg catalog for archival. Additional configuration is in
  # config/bufstream.yaml.
  bufstream:
    image: bufbuild/bufstream:0.3.43

    hostname: localhost
    container_name: bufstream
    networks:
      iceberg_net:
    depends_on:
      minio:
        condition: service_healthy
    environment:
      BUFSTREAM_KAFKA_HOST: localhost
      BUFSTREAM_KAFKA_PUBLIC_HOST: localhost
    ports:
      # We'll expose bufstream on the host at port 9092.
      - "9092:9092"
      - "9089:9089"
    healthcheck:
      test:
        [
          "CMD",
          "/usr/local/bin/bufstream",
          "admin",
          "status",
          "--exit-code",
          "--url",
          "http://127.0.0.1:9089",
        ]
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    # Edit bufstream.yaml within this repository to change configuration.
    volumes:
      - ./config/bufstream.yaml:/bufstream.yaml
    command: ["serve", "--config", "/bufstream.yaml"]

  # Nessie open iceberg catalog
  nessie:
    image: ghcr.io/projectnessie/nessie:latest
    container_name: nessie
    ports:
      - "19120:19120" # Nessie API port
    environment:
      # Version store settings, using in-memory store
      - nessie.version.store.type=IN_MEMORY

      # Catalog configuration for Iceberg REST
      - nessie.catalog.default-warehouse=warehouse
      - nessie.catalog.warehouses.warehouse.location=s3://my-bucket/ # Use a simple S3-like bucket (can be MinIO)
      - nessie.catalog.service.s3.default-options.endpoint=http://minio:9000/
      - nessie.catalog.service.s3.default-options.path-style-access=true
      # Correct MinIO credentials for Nessie to use
      - nessie.catalog.service.s3.default-options.request-signing-enabled=false
      - nessie.catalog.service.s3.default-options.access-key=urn:nessie-secret:quarkus:nessie.catalog.secrets.access-key
      - nessie.catalog.secrets.access-key.name=admin
      - nessie.catalog.secrets.access-key.secret=password
      - nessie.catalog.service.s3.default-options.region=us-east-1 # Explicitly set region

      # No authentication (disabled)
      - nessie.server.authentication.enabled=false
    networks:
      iceberg_net:

  # Dremio
  dremio:
    platform: linux/x86_64
    image: dremio/dremio-oss:latest
    ports:
      - 9047:9047
      - 31010:31010
      - 32010:32010
      - 45678:45678
    container_name: dremio
    environment:
      - DREMIO_JAVA_SERVER_EXTRA_OPTS=-Dpaths.dist=file:///opt/dremio/data/dist
    networks:
      iceberg_net:

  spark:
    platform: linux/x86_64
    image: alexmerced/spark35notebook:latest
    ports:
      - 8080:8080 # Master Web UI
      - 7077:7077 # Master Port
      - 8888:8888 # Notebook
      - 10000:10000
      - 10001:10001
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=admin #minio username
      - AWS_SECRET_ACCESS_KEY=password #minio password
    container_name: spark
    networks:
      iceberg_net:

  # AKHQ
  akhq:
    image: tchiotludo/akhq:0.26.0
    container_name: akhq
    stop_signal: SIGKILL
    networks:
      iceberg_net:
    depends_on:
      bufstream:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--silent",
          "--fail",
          "--output",
          "/dev/null",
          "http://localhost:28081/health",
        ]
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - "8282:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            bufstream-local:
              properties:
                bootstrap.servers: "bufstream:9092"
                client.id: "akhq;broker_count=1;host_override=bufstream"
              schema-registry:
                url: "https://demo.buf.dev/integrations/confluent/bufstream-demo"
                type: "confluent"

networks:
  iceberg_net:

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: acme/weather/v1/weather.proto
// Protobuf C++ Version: 5.28.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_acme_2fweather_2fv1_2fweather_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_acme_2fweather_2fv1_2fweather_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_acme_2fweather_2fv1_2fweather_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_acme_2fweather_2fv1_2fweather_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_acme_2fweather_2fv1_2fweather_2eproto;
namespace acme {
namespace weather {
namespace v1 {
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Weather;
struct WeatherDefaultTypeInternal;
extern WeatherDefaultTypeInternal _Weather_default_instance_;
}  // namespace v1
}  // namespace weather
}  // namespace acme
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace acme {
namespace weather {
namespace v1 {
enum Condition : int {
  CONDITION_UNKNOWN = 0,
  CONDITION_RAINY = 1,
  CONDITION_SUNNY = 2,
  CONDITION_CLOUDY = 3,
  Condition_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Condition_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Condition_IsValid(int value);
extern const uint32_t Condition_internal_data_[];
constexpr Condition Condition_MIN = static_cast<Condition>(0);
constexpr Condition Condition_MAX = static_cast<Condition>(3);
constexpr int Condition_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Condition_descriptor();
template <typename T>
const std::string& Condition_Name(T value) {
  static_assert(std::is_same<T, Condition>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Condition_Name().");
  return Condition_Name(static_cast<Condition>(value));
}
template <>
inline const std::string& Condition_Name(Condition value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Condition_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Condition_Parse(absl::string_view name, Condition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Condition>(
      Condition_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Location final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:acme.weather.v1.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Location(
      ::google::protobuf::internal::ConstantInitialized);

  inline Location(const Location& from) : Location(nullptr, from) {}
  inline Location(Location&& from) noexcept
      : Location(nullptr, std::move(from)) {}
  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
        &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Location& a, Location& b) { a.Swap(&b); }
  inline void Swap(Location* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Location>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Location* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "acme.weather.v1.Location"; }

 protected:
  explicit Location(::google::protobuf::Arena* arena);
  Location(::google::protobuf::Arena* arena, const Location& from);
  Location(::google::protobuf::Arena* arena, Location&& from) noexcept
      : Location(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // float latitude = 1 [json_name = "latitude"];
  void clear_latitude() ;
  float latitude() const;
  void set_latitude(float value);

  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);

  public:
  // float longitude = 2 [json_name = "longitude"];
  void clear_longitude() ;
  float longitude() const;
  void set_longitude(float value);

  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);

  public:
  // @@protoc_insertion_point(class_scope:acme.weather.v1.Location)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Location_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Location& from_msg);
    float latitude_;
    float longitude_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acme_2fweather_2fv1_2fweather_2eproto;
};
// -------------------------------------------------------------------

class Weather final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:acme.weather.v1.Weather) */ {
 public:
  inline Weather() : Weather(nullptr) {}
  ~Weather() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Weather(
      ::google::protobuf::internal::ConstantInitialized);

  inline Weather(const Weather& from) : Weather(nullptr, from) {}
  inline Weather(Weather&& from) noexcept
      : Weather(nullptr, std::move(from)) {}
  inline Weather& operator=(const Weather& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weather& operator=(Weather&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weather& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weather* internal_default_instance() {
    return reinterpret_cast<const Weather*>(
        &_Weather_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Weather& a, Weather& b) { a.Swap(&b); }
  inline void Swap(Weather* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weather* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weather* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Weather>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Weather* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "acme.weather.v1.Weather"; }

 protected:
  explicit Weather(::google::protobuf::Arena* arena);
  Weather(::google::protobuf::Arena* arena, const Weather& from);
  Weather(::google::protobuf::Arena* arena, Weather&& from) noexcept
      : Weather(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 1,
    kTemperatureFieldNumber = 2,
    kWindSpeedFieldNumber = 3,
    kConditionFieldNumber = 4,
  };
  // .acme.weather.v1.Location location = 1 [json_name = "location"];
  bool has_location() const;
  void clear_location() ;
  const ::acme::weather::v1::Location& location() const;
  PROTOBUF_NODISCARD ::acme::weather::v1::Location* release_location();
  ::acme::weather::v1::Location* mutable_location();
  void set_allocated_location(::acme::weather::v1::Location* value);
  void unsafe_arena_set_allocated_location(::acme::weather::v1::Location* value);
  ::acme::weather::v1::Location* unsafe_arena_release_location();

  private:
  const ::acme::weather::v1::Location& _internal_location() const;
  ::acme::weather::v1::Location* _internal_mutable_location();

  public:
  // float temperature = 2 [json_name = "temperature"];
  void clear_temperature() ;
  float temperature() const;
  void set_temperature(float value);

  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);

  public:
  // float wind_speed = 3 [json_name = "windSpeed"];
  void clear_wind_speed() ;
  float wind_speed() const;
  void set_wind_speed(float value);

  private:
  float _internal_wind_speed() const;
  void _internal_set_wind_speed(float value);

  public:
  // .acme.weather.v1.Condition condition = 4 [json_name = "condition"];
  void clear_condition() ;
  ::acme::weather::v1::Condition condition() const;
  void set_condition(::acme::weather::v1::Condition value);

  private:
  ::acme::weather::v1::Condition _internal_condition() const;
  void _internal_set_condition(::acme::weather::v1::Condition value);

  public:
  // @@protoc_insertion_point(class_scope:acme.weather.v1.Weather)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Weather_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Weather& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::acme::weather::v1::Location* location_;
    float temperature_;
    float wind_speed_;
    int condition_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acme_2fweather_2fv1_2fweather_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Location

// float latitude = 1 [json_name = "latitude"];
inline void Location::clear_latitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = 0;
}
inline float Location::latitude() const {
  // @@protoc_insertion_point(field_get:acme.weather.v1.Location.latitude)
  return _internal_latitude();
}
inline void Location::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:acme.weather.v1.Location.latitude)
}
inline float Location::_internal_latitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_;
}
inline void Location::_internal_set_latitude(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = value;
}

// float longitude = 2 [json_name = "longitude"];
inline void Location::clear_longitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = 0;
}
inline float Location::longitude() const {
  // @@protoc_insertion_point(field_get:acme.weather.v1.Location.longitude)
  return _internal_longitude();
}
inline void Location::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:acme.weather.v1.Location.longitude)
}
inline float Location::_internal_longitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_;
}
inline void Location::_internal_set_longitude(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = value;
}

// -------------------------------------------------------------------

// Weather

// .acme.weather.v1.Location location = 1 [json_name = "location"];
inline bool Weather::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline void Weather::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::acme::weather::v1::Location& Weather::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::acme::weather::v1::Location* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::acme::weather::v1::Location&>(::acme::weather::v1::_Location_default_instance_);
}
inline const ::acme::weather::v1::Location& Weather::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acme.weather.v1.Weather.location)
  return _internal_location();
}
inline void Weather::unsafe_arena_set_allocated_location(::acme::weather::v1::Location* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::acme::weather::v1::Location*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:acme.weather.v1.Weather.location)
}
inline ::acme::weather::v1::Location* Weather::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::acme::weather::v1::Location* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::acme::weather::v1::Location* Weather::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:acme.weather.v1.Weather.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::acme::weather::v1::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::acme::weather::v1::Location* Weather::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::acme::weather::v1::Location>(GetArena());
    _impl_.location_ = reinterpret_cast<::acme::weather::v1::Location*>(p);
  }
  return _impl_.location_;
}
inline ::acme::weather::v1::Location* Weather::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::acme::weather::v1::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:acme.weather.v1.Weather.location)
  return _msg;
}
inline void Weather::set_allocated_location(::acme::weather::v1::Location* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::acme::weather::v1::Location*>(value);
  // @@protoc_insertion_point(field_set_allocated:acme.weather.v1.Weather.location)
}

// float temperature = 2 [json_name = "temperature"];
inline void Weather::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
}
inline float Weather::temperature() const {
  // @@protoc_insertion_point(field_get:acme.weather.v1.Weather.temperature)
  return _internal_temperature();
}
inline void Weather::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:acme.weather.v1.Weather.temperature)
}
inline float Weather::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void Weather::_internal_set_temperature(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// float wind_speed = 3 [json_name = "windSpeed"];
inline void Weather::clear_wind_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_speed_ = 0;
}
inline float Weather::wind_speed() const {
  // @@protoc_insertion_point(field_get:acme.weather.v1.Weather.wind_speed)
  return _internal_wind_speed();
}
inline void Weather::set_wind_speed(float value) {
  _internal_set_wind_speed(value);
  // @@protoc_insertion_point(field_set:acme.weather.v1.Weather.wind_speed)
}
inline float Weather::_internal_wind_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wind_speed_;
}
inline void Weather::_internal_set_wind_speed(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_speed_ = value;
}

// .acme.weather.v1.Condition condition = 4 [json_name = "condition"];
inline void Weather::clear_condition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition_ = 0;
}
inline ::acme::weather::v1::Condition Weather::condition() const {
  // @@protoc_insertion_point(field_get:acme.weather.v1.Weather.condition)
  return _internal_condition();
}
inline void Weather::set_condition(::acme::weather::v1::Condition value) {
  _internal_set_condition(value);
  // @@protoc_insertion_point(field_set:acme.weather.v1.Weather.condition)
}
inline ::acme::weather::v1::Condition Weather::_internal_condition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::acme::weather::v1::Condition>(_impl_.condition_);
}
inline void Weather::_internal_set_condition(::acme::weather::v1::Condition value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace weather
}  // namespace acme


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::acme::weather::v1::Condition> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::acme::weather::v1::Condition>() {
  return ::acme::weather::v1::Condition_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_acme_2fweather_2fv1_2fweather_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acme/weather/v1/weather.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_acme_2fweather_2fv1_2fweather_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_acme_2fweather_2fv1_2fweather_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_acme_2fweather_2fv1_2fweather_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_acme_2fweather_2fv1_2fweather_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_acme_2fweather_2fv1_2fweather_2eproto;
namespace acme {
namespace weather {
namespace v1 {
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Weather;
struct WeatherDefaultTypeInternal;
extern WeatherDefaultTypeInternal _Weather_default_instance_;
}  // namespace v1
}  // namespace weather
}  // namespace acme
PROTOBUF_NAMESPACE_OPEN
template<> ::acme::weather::v1::Location* Arena::CreateMaybeMessage<::acme::weather::v1::Location>(Arena*);
template<> ::acme::weather::v1::Weather* Arena::CreateMaybeMessage<::acme::weather::v1::Weather>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace acme {
namespace weather {
namespace v1 {

enum Condition : int {
  CONDITION_UNKNOWN = 0,
  CONDITION_RAINY = 1,
  CONDITION_SUNNY = 2,
  CONDITION_CLOUDY = 3,
  Condition_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Condition_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Condition_IsValid(int value);
constexpr Condition Condition_MIN = CONDITION_UNKNOWN;
constexpr Condition Condition_MAX = CONDITION_CLOUDY;
constexpr int Condition_ARRAYSIZE = Condition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Condition_descriptor();
template<typename T>
inline const std::string& Condition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Condition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Condition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Condition_descriptor(), enum_t_value);
}
inline bool Condition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Condition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Condition>(
    Condition_descriptor(), name, value);
}
// ===================================================================

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:acme.weather.v1.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit PROTOBUF_CONSTEXPR Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "acme.weather.v1.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // float latitude = 1 [json_name = "latitude"];
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // float longitude = 2 [json_name = "longitude"];
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:acme.weather.v1.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float latitude_;
    float longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acme_2fweather_2fv1_2fweather_2eproto;
};
// -------------------------------------------------------------------

class Weather final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:acme.weather.v1.Weather) */ {
 public:
  inline Weather() : Weather(nullptr) {}
  ~Weather() override;
  explicit PROTOBUF_CONSTEXPR Weather(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Weather(const Weather& from);
  Weather(Weather&& from) noexcept
    : Weather() {
    *this = ::std::move(from);
  }

  inline Weather& operator=(const Weather& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weather& operator=(Weather&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weather& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weather* internal_default_instance() {
    return reinterpret_cast<const Weather*>(
               &_Weather_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Weather& a, Weather& b) {
    a.Swap(&b);
  }
  inline void Swap(Weather* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weather* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weather* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Weather>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weather* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "acme.weather.v1.Weather";
  }
  protected:
  explicit Weather(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kTemperatureFieldNumber = 2,
    kWindSpeedFieldNumber = 3,
    kConditionFieldNumber = 4,
  };
  // .acme.weather.v1.Location location = 1 [json_name = "location"];
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::acme::weather::v1::Location& location() const;
  PROTOBUF_NODISCARD ::acme::weather::v1::Location* release_location();
  ::acme::weather::v1::Location* mutable_location();
  void set_allocated_location(::acme::weather::v1::Location* location);
  private:
  const ::acme::weather::v1::Location& _internal_location() const;
  ::acme::weather::v1::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::acme::weather::v1::Location* location);
  ::acme::weather::v1::Location* unsafe_arena_release_location();

  // float temperature = 2 [json_name = "temperature"];
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // float wind_speed = 3 [json_name = "windSpeed"];
  void clear_wind_speed();
  float wind_speed() const;
  void set_wind_speed(float value);
  private:
  float _internal_wind_speed() const;
  void _internal_set_wind_speed(float value);
  public:

  // .acme.weather.v1.Condition condition = 4 [json_name = "condition"];
  void clear_condition();
  ::acme::weather::v1::Condition condition() const;
  void set_condition(::acme::weather::v1::Condition value);
  private:
  ::acme::weather::v1::Condition _internal_condition() const;
  void _internal_set_condition(::acme::weather::v1::Condition value);
  public:

  // @@protoc_insertion_point(class_scope:acme.weather.v1.Weather)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::acme::weather::v1::Location* location_;
    float temperature_;
    float wind_speed_;
    int condition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acme_2fweather_2fv1_2fweather_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Location

// float latitude = 1 [json_name = "latitude"];
inline void Location::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline float Location::_internal_latitude() const {
  return _impl_.latitude_;
}
inline float Location::latitude() const {
  // @@protoc_insertion_point(field_get:acme.weather.v1.Location.latitude)
  return _internal_latitude();
}
inline void Location::_internal_set_latitude(float value) {
  
  _impl_.latitude_ = value;
}
inline void Location::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:acme.weather.v1.Location.latitude)
}

// float longitude = 2 [json_name = "longitude"];
inline void Location::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline float Location::_internal_longitude() const {
  return _impl_.longitude_;
}
inline float Location::longitude() const {
  // @@protoc_insertion_point(field_get:acme.weather.v1.Location.longitude)
  return _internal_longitude();
}
inline void Location::_internal_set_longitude(float value) {
  
  _impl_.longitude_ = value;
}
inline void Location::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:acme.weather.v1.Location.longitude)
}

// -------------------------------------------------------------------

// Weather

// .acme.weather.v1.Location location = 1 [json_name = "location"];
inline bool Weather::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool Weather::has_location() const {
  return _internal_has_location();
}
inline void Weather::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::acme::weather::v1::Location& Weather::_internal_location() const {
  const ::acme::weather::v1::Location* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::acme::weather::v1::Location&>(
      ::acme::weather::v1::_Location_default_instance_);
}
inline const ::acme::weather::v1::Location& Weather::location() const {
  // @@protoc_insertion_point(field_get:acme.weather.v1.Weather.location)
  return _internal_location();
}
inline void Weather::unsafe_arena_set_allocated_location(
    ::acme::weather::v1::Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:acme.weather.v1.Weather.location)
}
inline ::acme::weather::v1::Location* Weather::release_location() {
  
  ::acme::weather::v1::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::acme::weather::v1::Location* Weather::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:acme.weather.v1.Weather.location)
  
  ::acme::weather::v1::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::acme::weather::v1::Location* Weather::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::acme::weather::v1::Location>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::acme::weather::v1::Location* Weather::mutable_location() {
  ::acme::weather::v1::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:acme.weather.v1.Weather.location)
  return _msg;
}
inline void Weather::set_allocated_location(::acme::weather::v1::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:acme.weather.v1.Weather.location)
}

// float temperature = 2 [json_name = "temperature"];
inline void Weather::clear_temperature() {
  _impl_.temperature_ = 0;
}
inline float Weather::_internal_temperature() const {
  return _impl_.temperature_;
}
inline float Weather::temperature() const {
  // @@protoc_insertion_point(field_get:acme.weather.v1.Weather.temperature)
  return _internal_temperature();
}
inline void Weather::_internal_set_temperature(float value) {
  
  _impl_.temperature_ = value;
}
inline void Weather::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:acme.weather.v1.Weather.temperature)
}

// float wind_speed = 3 [json_name = "windSpeed"];
inline void Weather::clear_wind_speed() {
  _impl_.wind_speed_ = 0;
}
inline float Weather::_internal_wind_speed() const {
  return _impl_.wind_speed_;
}
inline float Weather::wind_speed() const {
  // @@protoc_insertion_point(field_get:acme.weather.v1.Weather.wind_speed)
  return _internal_wind_speed();
}
inline void Weather::_internal_set_wind_speed(float value) {
  
  _impl_.wind_speed_ = value;
}
inline void Weather::set_wind_speed(float value) {
  _internal_set_wind_speed(value);
  // @@protoc_insertion_point(field_set:acme.weather.v1.Weather.wind_speed)
}

// .acme.weather.v1.Condition condition = 4 [json_name = "condition"];
inline void Weather::clear_condition() {
  _impl_.condition_ = 0;
}
inline ::acme::weather::v1::Condition Weather::_internal_condition() const {
  return static_cast< ::acme::weather::v1::Condition >(_impl_.condition_);
}
inline ::acme::weather::v1::Condition Weather::condition() const {
  // @@protoc_insertion_point(field_get:acme.weather.v1.Weather.condition)
  return _internal_condition();
}
inline void Weather::_internal_set_condition(::acme::weather::v1::Condition value) {
  
  _impl_.condition_ = value;
}
inline void Weather::set_condition(::acme::weather::v1::Condition value) {
  _internal_set_condition(value);
  // @@protoc_insertion_point(field_set:acme.weather.v1.Weather.condition)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace weather
}  // namespace acme

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::acme::weather::v1::Condition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acme::weather::v1::Condition>() {
  return ::acme::weather::v1::Condition_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_acme_2fweather_2fv1_2fweather_2eproto

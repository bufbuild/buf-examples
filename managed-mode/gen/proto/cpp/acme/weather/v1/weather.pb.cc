// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: acme/weather/v1/weather.proto
// Protobuf C++ Version: 5.28.2

#include "acme/weather/v1/weather.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace acme {
namespace weather {
namespace v1 {

inline constexpr Location::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : latitude_{0},
        longitude_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Location::Location(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;

inline constexpr Weather::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        temperature_{0},
        wind_speed_{0},
        condition_{static_cast< ::acme::weather::v1::Condition >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Weather::Weather(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WeatherDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WeatherDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WeatherDefaultTypeInternal() {}
  union {
    Weather _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WeatherDefaultTypeInternal _Weather_default_instance_;
}  // namespace v1
}  // namespace weather
}  // namespace acme
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_acme_2fweather_2fv1_2fweather_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_acme_2fweather_2fv1_2fweather_2eproto = nullptr;
const ::uint32_t
    TableStruct_acme_2fweather_2fv1_2fweather_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::acme::weather::v1::Location, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::acme::weather::v1::Location, _impl_.latitude_),
        PROTOBUF_FIELD_OFFSET(::acme::weather::v1::Location, _impl_.longitude_),
        PROTOBUF_FIELD_OFFSET(::acme::weather::v1::Weather, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::acme::weather::v1::Weather, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::acme::weather::v1::Weather, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::acme::weather::v1::Weather, _impl_.temperature_),
        PROTOBUF_FIELD_OFFSET(::acme::weather::v1::Weather, _impl_.wind_speed_),
        PROTOBUF_FIELD_OFFSET(::acme::weather::v1::Weather, _impl_.condition_),
        0,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::acme::weather::v1::Location)},
        {10, 22, -1, sizeof(::acme::weather::v1::Weather)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::acme::weather::v1::_Location_default_instance_._instance,
    &::acme::weather::v1::_Weather_default_instance_._instance,
};
const char descriptor_table_protodef_acme_2fweather_2fv1_2fweather_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\035acme/weather/v1/weather.proto\022\017acme.we"
    "ather.v1\"D\n\010Location\022\032\n\010latitude\030\001 \001(\002R\010"
    "latitude\022\034\n\tlongitude\030\002 \001(\002R\tlongitude\"\273"
    "\001\n\007Weather\0225\n\010location\030\001 \001(\0132\031.acme.weat"
    "her.v1.LocationR\010location\022 \n\013temperature"
    "\030\002 \001(\002R\013temperature\022\035\n\nwind_speed\030\003 \001(\002R"
    "\twindSpeed\0228\n\tcondition\030\004 \001(\0162\032.acme.wea"
    "ther.v1.ConditionR\tcondition*b\n\tConditio"
    "n\022\025\n\021CONDITION_UNKNOWN\020\000\022\023\n\017CONDITION_RA"
    "INY\020\001\022\023\n\017CONDITION_SUNNY\020\002\022\024\n\020CONDITION_"
    "CLOUDY\020\003B\266\001\n\022io.acme.weather.v1B\014Weather"
    "ProtoH\002Z4github.com/acme/weather/v1/acme"
    "/weather/v1;weatherv1\242\002\003AWX\252\002\017Acme.Weath"
    "er.V1\312\002\017Acme\\Weather\\V1\342\002\033Acme\\Weather\\V"
    "1\\GPBMetadata\352\002\021Acme::Weather::V1b\006proto"
    "3"
};
static ::absl::once_flag descriptor_table_acme_2fweather_2fv1_2fweather_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_acme_2fweather_2fv1_2fweather_2eproto = {
    false,
    false,
    601,
    descriptor_table_protodef_acme_2fweather_2fv1_2fweather_2eproto,
    "acme/weather/v1/weather.proto",
    &descriptor_table_acme_2fweather_2fv1_2fweather_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_acme_2fweather_2fv1_2fweather_2eproto::offsets,
    file_level_enum_descriptors_acme_2fweather_2fv1_2fweather_2eproto,
    file_level_service_descriptors_acme_2fweather_2fv1_2fweather_2eproto,
};
namespace acme {
namespace weather {
namespace v1 {
const ::google::protobuf::EnumDescriptor* Condition_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_acme_2fweather_2fv1_2fweather_2eproto);
  return file_level_enum_descriptors_acme_2fweather_2fv1_2fweather_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Condition_internal_data_[] = {
    262144u, 0u, };
bool Condition_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:acme.weather.v1.Location)
}
Location::Location(
    ::google::protobuf::Arena* arena, const Location& from)
    : Location(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Location::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Location::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_),
           0,
           offsetof(Impl_, longitude_) -
               offsetof(Impl_, latitude_) +
               sizeof(Impl_::longitude_));
}
Location::~Location() {
  // @@protoc_insertion_point(destructor:acme.weather.v1.Location)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Location::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Location::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Location_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Location::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Location>(),
            ::google::protobuf::Message::GetNewImpl<Location>(),
            ::google::protobuf::Message::ClearImpl, ::google::protobuf::Message::ByteSizeLongImpl,
                ::google::protobuf::Message::_InternalSerializeImpl,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Location, _impl_._cached_size_),
            false,
        },
        &Location::kDescriptorMethods,
        &descriptor_table_acme_2fweather_2fv1_2fweather_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Location::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Location::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::acme::weather::v1::Location>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float longitude = 2 [json_name = "longitude"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Location, _impl_.longitude_)}},
    // float latitude = 1 [json_name = "latitude"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Location, _impl_.latitude_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float latitude = 1 [json_name = "latitude"];
    {PROTOBUF_FIELD_OFFSET(Location, _impl_.latitude_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float longitude = 2 [json_name = "longitude"];
    {PROTOBUF_FIELD_OFFSET(Location, _impl_.longitude_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

void Location::InternalSwap(Location* PROTOBUF_RESTRICT other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata Location::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Weather::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Weather>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Weather, _impl_._has_bits_);
};

Weather::Weather(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:acme.weather.v1.Weather)
}
inline PROTOBUF_NDEBUG_INLINE Weather::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::acme::weather::v1::Weather& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Weather::Weather(
    ::google::protobuf::Arena* arena,
    const Weather& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Weather* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::acme::weather::v1::Location>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, temperature_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, temperature_),
           offsetof(Impl_, condition_) -
               offsetof(Impl_, temperature_) +
               sizeof(Impl_::condition_));

  // @@protoc_insertion_point(copy_constructor:acme.weather.v1.Weather)
}
inline PROTOBUF_NDEBUG_INLINE Weather::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Weather::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, condition_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::condition_));
}
Weather::~Weather() {
  // @@protoc_insertion_point(destructor:acme.weather.v1.Weather)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Weather::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Weather::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Weather_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Weather::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Weather>(),
            ::google::protobuf::Message::GetNewImpl<Weather>(),
            ::google::protobuf::Message::ClearImpl, ::google::protobuf::Message::ByteSizeLongImpl,
                ::google::protobuf::Message::_InternalSerializeImpl,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Weather, _impl_._cached_size_),
            false,
        },
        &Weather::kDescriptorMethods,
        &descriptor_table_acme_2fweather_2fv1_2fweather_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Weather::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> Weather::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Weather, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::acme::weather::v1::Weather>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .acme.weather.v1.Condition condition = 4 [json_name = "condition"];
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Weather, _impl_.condition_)}},
    // .acme.weather.v1.Location location = 1 [json_name = "location"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Weather, _impl_.location_)}},
    // float temperature = 2 [json_name = "temperature"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Weather, _impl_.temperature_)}},
    // float wind_speed = 3 [json_name = "windSpeed"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Weather, _impl_.wind_speed_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .acme.weather.v1.Location location = 1 [json_name = "location"];
    {PROTOBUF_FIELD_OFFSET(Weather, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float temperature = 2 [json_name = "temperature"];
    {PROTOBUF_FIELD_OFFSET(Weather, _impl_.temperature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float wind_speed = 3 [json_name = "windSpeed"];
    {PROTOBUF_FIELD_OFFSET(Weather, _impl_.wind_speed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .acme.weather.v1.Condition condition = 4 [json_name = "condition"];
    {PROTOBUF_FIELD_OFFSET(Weather, _impl_.condition_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::acme::weather::v1::Location>()},
  }}, {{
  }},
};

void Weather::InternalSwap(Weather* PROTOBUF_RESTRICT other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata Weather::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace weather
}  // namespace acme
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_acme_2fweather_2fv1_2fweather_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
